var dexieDB=null;function DatabaseIndexedDB(e){var a=((e||"")+"_cache").toLowerCase(),t=new Dexie(a);t.version(1).stores({key_value:"key, value"});var o=!1;this.db=t,this.enable=(()=>{o=!0}),this.disable=(()=>{o=!0}),this.drop=(()=>new Promise((e,a)=>{Promise.resolve().then(()=>t.delete()).then(e).catch(a=>(logger({data:"drop:"+a,consoleFunction:console.error}),e()))})),this.set_key_value=(({key:e,value:a})=>o?Promise.resolve():(logger({data:"set_key_value:"+{key:e,value:a},consoleFunction:console.log}),new Promise((o,n)=>{Promise.resolve().then(()=>t.key_value.put({key:e,value:a})).then(a=>(a!==e&&logger({data:"Error saving key "+e+" to database.",consoleFunction:console.error}),a)).then(o).catch(e=>(logger({data:"set_key_value:"+e,consoleFunction:console.error}),o()))}))),this.get_key_value=(({key:e})=>o?Promise.resolve():(logger({data:"get_key_value:"+e,consoleFunction:console.log}),new Promise((a,o)=>{Promise.resolve().then(()=>t.key_value.where("key").equals(e).first()).then(a).catch(e=>(logger({data:"get_key_value:"+e,consoleFunction:console.error}),a()))}))),this.delete_key_value=(({key:e})=>(logger({data:"delete_key_value:"+e,consoleFunction:console.log}),new Promise((a,o)=>{Promise.resolve().then(()=>t.key_value.delete(e)).then(a).catch(e=>(logger({data:"delete_key_value:"+e,consoleFunction:console.error}),a()))}))),this.clear_key_values=(()=>(logger({data:"clear_key_values",consoleFunction:console.log}),new Promise((e,a)=>{Promise.resolve().then(()=>t.key_value.clear()).then(e).catch(a=>(logger({data:"clear_key_values:"+a,consoleFunction:console.error}),e()))})))}function storeUserAuth(e){dexieDB.set_key_value({key:"user_auth",value:JSON.stringify(e)})}function retrieveUserAuth(){return dexieDB.get_key_value({key:"user_auth"})}function storeBGInIndexDB(e,a){dexieDB=new DatabaseIndexedDB(bg.get("uname"));const t=e.pass,o=e.URLSafeBase64PublicStrings,n=e.equivalentDomains;delete e.pass,delete e.URLSafeBase64PublicStrings,delete e.equivalentDomains;var s=KeeperAES256GCMencrypt(JSON.stringify(e),a),r=new Blob([s],{type:"application/octet-binary"});dexieDB.set_key_value({key:"bgObj",value:r}),e.pass=t,e.URLSafeBase64PublicStrings=o,e.equivalentDomains=n}function initBGFromIndexDB(e,a){return new Promise((t,o)=>{Promise.resolve().then(()=>{dexieDB.get_key_value({key:"bgObj"}).then(function(o){var n=new FileReader;n.onloadend=function(o){var n=bg.isOffline,s=JSON.parse(KeeperAES256GCMdecrypt(o.srcElement.result,a));appendBGFunctions(s),bg=Object.assign({},bg,s),bg.isOffline=n,bg.set("pass",e),initializeSettings(),"undefined"!=typeof chrome&&chrome.browserAction&&chrome.browserAction.setIcon({path:{19:"19-active.png",38:"38-active.png"}}),t(bg)},n.readAsText(o.value)})})})}function removeBGInIndexDB(e){DatabaseIndexedDB.deleteCacheDatabase(e)}function initOfflineDBUsers(){if(localStorage.savedUsers){var e=JSON.parse(localStorage.savedUsers),a=[];for(var t in e)a.push(DatabaseIndexedDB.existsWithName(t));Promise.all(a).then(a=>{a.forEach(a=>{e[Object.keys(a)[0]]={hasOfflineDB:Object.values(a)[0]}}),localStorage.savedUsers=JSON.stringify(e)}).catch(e=>{logger({data:e,consoleFunction:console.error})})}}DatabaseIndexedDB.exists=(e=>Dexie.exists(e+"_cache")),DatabaseIndexedDB.existsWithName=(e=>Dexie.exists(e+"_cache").then(a=>{var t={};return t[e]=a,t})),DatabaseIndexedDB.deleteCacheDatabase=(e=>{if(logger({data:"Deleting cache database",consoleFunction:console.log}),e)return e=e.toLowerCase(),Dexie.delete(`${e}_cache`)}),DatabaseIndexedDB.deleteDatabase=(e=>{if(logger({data:"Deleting database",consoleFunction:console.log}),e)return e=e.toLowerCase(),Dexie.delete(e)});